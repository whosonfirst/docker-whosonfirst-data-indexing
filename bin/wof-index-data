#!/bin/sh
# -*-sh-*-

# /usr/local/bin/wof-index-data,-s,'credentials=iam: region=us-east-1 bucket=data.whosonfirst.org',-e,https://172.31.26.200#9200#spelunker,-n,-a,whosonfirst-data-admin-gr

GETOPT=`which getopt`
GIT=`which git`
S3_SYNC=`which wof-s3-sync`
ES_INDEX_TOOL=`which wof-es-index`	# this can't be ported to Go soon enough... (20190122/thisisaaronland)

ES_CONFIG="localhost#9200#index"
S3_DSN=""

GITHUB_ORG="whosonfirst-data"

DATA="/usr/local/data"
DRYRUN=""
ALL=""

ARGS=`${GETOPT} t:d:e:s:g:a:n:h $*`
set -- $ARGS

for i; do
    case "$i" in
        -h  ) 
	      USAGE=1
	      shift; shift;;
	-t  ) TARGET=$2
	      shift; shift ;;
	-d  ) DATA=$2
	      shift; shift ;;
	-e  ) ES_CONFIG=$2
	      shift; shift;;
	-s  ) S3_DSN=$2
	      shift; shift;;
	-g  ) GITHUB_ORG=$2
	      shift; shift;;
	-a  ) ALL=1
	      shift;;
	-n  ) DRYRUN=1
	      shift; shift ;;	
	--  ) shift $((OPTIND -1)); break ;;
    esac
done

if [ "${USAGE}" = "1" ]
then
    echo "usage: ./index-data -options"
    echo "options:"
    echo "...please write me"
    exit 0
fi

ES_HOST=`echo ${ES_CONFIG} | awk -F '#' '{ print $1 }'`
ES_PORT=`echo ${ES_CONFIG} | awk -F '#:' '{ print $2 }'`
ES_INDEX=`echo ${ES_CONFIG} | awk -F '#' '{ print $3 }'`

# basic sanity checking on ES_ and S3_DSN variables here

echo "ES HOST: '${ES_HOST}'"
echo "ES PORT: '${ES_PORT}'"
echo "ES INDEX: '${ES_INDEX}'"
echo "S3 DSN: '${S3_DSN}'"

TO_INDEX=$@

for REPO_NAME in $TO_INDEX
do

    cd ${DATA}

    ${GIT} clone https://github.com/${GITHUB_ORG}/${REPO_NAME}.git

    if [ $? -ne 0 ]
    then
	echo "Failed to clone ${REPO_NAME}"
	continue
    fi
    
    REPO_PATH="${DATA}/${REPO_NAME}"
    cd ${REPO_PATH}

    INDEX_MODE="filelist"
    INDEX_PATH="${REPO_PATH}/index.txt"

    # as of this writing most (all...) of the time savings doing it this way is targeted at
    # flights and because of the way we are exporting them (flights) â€“ which involves using a
    # two-pass export, first in go and then again using the more-complete python exporter 
    # basically a pure-go port of the py-mapzen-whosonfirst-export code can't happen soon
    # enough but until then all of the effeciencies here depend on exporting flights with
    # something like this (where utils/python/export.py is bundled with the flights repo):
    #
    # git status --porcelain --untracked-files=all | egrep '.geojson' | awk '{ print $$2 }' > new.txt
    # python utils/python/export.py -r . -f new.txt
    # rm new.txt
    #
    # (20190123/thisisaaronland)

    if [ "${ALL}" = "1" ]
    then
	INDEX_MODE="repo"
	INDEX_PATH="${REPO_PATH}"
    else
	${GIT} log --name-only --pretty=format:'' HEAD^..HEAD > ${INDEX_PATH}
    fi

    echo "index ${REPO_PATH} in '${INDEX_MODE}' mode, reading from ${INDEX_PATH}"

    echo ${S3_SYNC} -verbose -dsn "${S3_DSN}" -mode ${INDEX_MODE} ${INDEX_PATH}
	
    if [ "${DRYRUN}" = "" ]
    then
	${S3_SYNC} -verbose -dsn "${S3_DSN}" -mode ${INDEX_MODE} ${INDEX_PATH}
    fi
    
    echo ${ES_INDEX_TOOL} -b -c 1500 --host ${ES_HOST} --port ${ES_PORT} --index ${ES_INDEX} --mode ${INDEX_MODE} ${INDEX_PATH}
    
    if [ "${DRYRUN}" = "" ]
    then
	${ES_INDEX_TOOL} -b -c 1500 --host ${ES_HOST} --port ${ES_PORT} --index ${ES_INDEX} -m ${INDEX_MODE} ${INDEX_PATH}
    fi
    
    if [ -f ${INDEX_PATH} ]
    then
	rm ${INDEX_PATH}
    fi

    cd -
    rm -rf ${REPO_PATH}
    
done
